

Внешняя спецификация

main_win: procedure;
    // объявить структуру, содержащую конфигурационные данные
    declare 1 config;                           // словарь атрибутов конфигурации
              2 node: string [250];             // тип АТС
              2 type_dn: string [250];          // тип обрабатываемых номеров
              2 dest_dir: string [250];         // директория выгрузки данных
              2 sourse_file_db: string [250];   // имя файла с БД
              2 mapping_category: string [250]; // имя файла с шаблоном категорий
              2 mapping_service: string [250];  // имя файла с шаблоном услуг
              2 mapping_ims: string [250];      // имя файла с шаблоним IMS

    // Запустить вывод логирования работы на экран
    call show_log;

    // обработка кнопок формы
    do case (кнопка)
        //do  выполнить конвертирование;
        "кнопка RUN": call run_migrate (config); // запустить скрипт миграции
        //do  получить конфигурационные данные;
        "кнопка Config": call config_window(config); // открыть графическую форму настройки конфигурации
        "кнопка Quit": call Exit; // завершить работу приложения
    end do;
end main_win;


Внутреняя спецификация

//  Вывод логирования действий программы на экран
show_log: procedure;
    begin
        declare queue;  // структура-очередь
        // запустить чтение лог-файл в бесконечном цикле
        call read_log;
        // запустить отображение данных из очереди на экран в бесконечном цикле
        call pull_display_from_log;
    end;
end show_log;

// Процедура чтения лог-файл в бесконечном цикле
read_log: procedure;

// Процедура забирает из очереди данные и выводит на экран в бесконечном цикле
pull_display_from_log: procedure;

// Процедура запускает скрипт миграции абонентов
run_migrate (config): procedure
    begin
        // создается объект-хранилище для исходной базы номеров АТС
        declare node_repo: type (BaseRepo);
        // создаётся объект-хранилище для хранения обработанной базы номеров IMS
        declare main_repo: type(ImsSubsRepo);
        // выполнить обработку исходной БД
        call node_repo(config);
        // выполнить конвертирование номеров по заданному алгоритму
        call main_interactor(main_repo, node_repo, config);
        // выполнить запись результатов в файл
        call write_wp(main_repo, config);
    end;
end run_migrate;


// Процедура выполняет запись обработанных данных о номерах в файл
write_wp: procedure (main_repo, config);
    begin
    declare wp_list; // массив для хранения списка номеров для обработки
    declare view_wp; // массив для хранения обработанного списка номеров

    // получить из репозитория список номеров по критерию
    wp_list = get(получить из main_repo список номеров по критерию config.type_dn)
    // сформировать формат представления данных для записи в файл
    view_wp = get(call функция_представления_данных_для_записи_в_текстовый_файла (wp_list))
    // записать конечные данные в файл
    call write_file (config.dest_dir, 'имя_файла', view_wp);
    end;
end write_wp

// Процедура графического окна формы конфигурации
config_window: procedure (config); 
    begin
        declare field_select_node;          // графический элемент-селектор
        declare field_select_type_number;   // графический элемент-селектор
        declare field_1;                    // графический элемент-поле ввода
        declare field_2;                    // графический элемент-поле ввода
        declare field_3;                    // графический элемент-поле ввода
        declare field_4;                    // графический элемент-поле ввода
        declare field_5;                    // графический элемент-поле ввода

        do case (кнопка)
            "Кнопка OK": call return_config(config); // возврать конфиг и закрыть окно
            "Кнопка Х": call exit; // закрыть окно конфигурации
            end do;

        // возврать конфиг и закрыть окно
        return_config: procedure (config);
            begin
                if check_fields() есть истинна; // проверка полей ввода
                then 
                    call add_to_config(config); // добавить атрибуты в словарь конфигурации
                    call Exit; // закрыть окно конфигурации
            end;
        end return_config;

        // Процедура проверки полей ввода
        check_fields: procedure RETURNS (BOOL);
            begin

                // поле директория выгрузки данных
                get (field_1)       
                if (field_1 < 0 or field_1 > 250 or field_1 не найдена указанная директория);
                then
                    call show_alarm (field_1);
                    return False;   // неуспешная проверка

                // имя файла с БД
                get (field_2)
                if (field_2 < 0 or field_2 > 250 or field_2 не найден указанный файл);
                then
                    call show_alarm (field_2);
                    return False;   // неуспешная проверка

                // имя файла с шаблоном категорий
                get (field_3)
                if (field_3 < 0 or field_3 > 250 or field_3 не найден указанный файл);
                then
                    call show_alarm (field_3);
                    return False;   // неуспешная проверка

                // имя файла с шаблоном услуг
                get (field_4)
                if (field_4 < 0 or field_4 > 250 or field_4 не найден указанный файл);
                then
                    call show_alarm (field_4);
                    return False;   // неуспешная проверка

                // имя файла с шаблоним IMS
                get (field_5)
                if (field_5 < 0 or field_5 > 250 or field_5 не найден указанный файл);
                then
                    call show_alarm (field_5);
                    return False;   // неуспешная проверка

                return True; // возвратить истину
            end;
        end check_fields;

        // Добавить атрибуты в словарь конфигурации
        add_to_config: procedure;
            begin
                config.node = get(field_select_node);
                config.type_dn = get(field_select_type_number);
                config.dest_dir = get(field_1);
                config.sourse_file_db = get(field_2);
                config.mapping_category = get(field_3);
                config.mapping_service = get(field_4);
                config.mapping_ims = get(field_5);
            end;
        end add_to_config;

        // отображает графическое окно с информацией об ошибке
        show_alarm: procedure (description); 
            degin
                показать графическое окно с информацией об ошибке
            end;
        end show_alarm;
    end;
end config_window;


// Процедура завершения работы приложения
Exit: procedure;