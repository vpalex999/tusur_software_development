PDL - язык проектирования программ

состоит из двух частей:

1. Заданный набор операторов, построенных по образцу языков программирования
2. общий, неопределяемый синтаксис, пригодный для описания задач в данной области.

- Внешний синтаксис - описывает логику программы и проектирования.
    Строится при помощи управляющих структур, имеющихся в большинстве языков программирования

- Внутренний синтаксис - неопределённый, который включает все структуры данных и процедуры
    по их обработке. Почти любое предложениена естественном языке можно использовать для 
    описания преобразованных данных


операторы PDL

1. Оператор выбора

а)
if выражение;
then оператор1;
else оператор2;

б)
do case (выражение);
/индекс1/ оператор;
...
/индекс_n/ оператор_n;
else оператор_n + 1;
end;

2. Оперратор цикла

а)
do while (выражение);
    набор операторов;
end;

б)
do переменная = выраж_1 to выраж_2 by выраж_3;
    набор операоров;
end;

3. Оператор описания данных

declare имя атрибуты;

Атрибуты могут быть стандартными типами данных (real, float, integer, etc)
    или структурами данных высокого уровня.

Другие операторы:
а) переменная = выражение;
б) call имя процедуры (список аргументов);
в) return (значение);
г) имя procedure (список параметров);
        список операторов;
    end;
д) get (список данных для ввода);
е) put (список данных для вывода);

Опрератор leave
- обеспочивает выход из цикла

Данные

- Скалярные - переменные, объявленные как элементарные типы.
- Агрегативные - состоят из наборов существующих типов данных.

Массивы:

declare A (10)   FIXED BINARY;
declare B (5:10) FIXED BINARY;

Структуры:
 
declare 1 X,
          2 Y FIXED BINARY,
          2 Z BIT(12);


Списки:

declare 1 LIST(N),
    2 DATA_ENTRIES TYPE (),
      SIZE; /* текущий размер списка*/

################################################################




MigrateIMS: procedure;
    // do  инициализировать графическое приложение;
    call main_win;
    //do  получить конфигурационные данные;
    call get_config;
    //do  выполнить конвертирование;
    call run_migrate;
    //do  записать результат обработки в файл;
    write_wp;
    end MigrateIMS;


main_win: procedure // Запускает формирование главного окна
    // do инициализировать базовый графический объект из библиотечного модуля; 
    declare root базовый_объект_окно;
    // do инициализировать главное графическое окно приложения;
    call AppWindow(run_migrate, root);


AppWindow: procedure (выполняемая_функция, объект_базового_графического_окна); // лавное графическое окно приложения
    declare gui_config TYPE(DICT) пустой_словарь для хранения данных атрибутов конфигурации;
    declare tool_bar TYPE(LIST); //список структур содержащих данные для инициализации верхнего меню;

    
